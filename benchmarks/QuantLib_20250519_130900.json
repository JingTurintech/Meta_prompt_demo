{
  "metadata": {
    "collected_at": "20250519_130900",
    "project_info": {
      "project_id": "f28e9994-4b44-446c-8973-7ab2037f1f55",
      "name": "QuantLib",
      "description": null,
      "language": "cpp",
      "files": [
        "ql/models/marketmodels/curvestates/lmmcurvestate.cpp",
        "ql/models/marketmodels/products/multistep/multistepinversefloater.cpp",
        "ql/models/marketmodels/callability/lsstrategy.cpp",
        "ql/models/marketmodels/browniangenerators/mtbrowniangenerator.cpp",
        "ql/models/marketmodels/curvestates/lmmcurvestate.cpp",
        "ql/models/marketmodels/curvestates/lmmcurvestate.cpp",
        "ql/models/marketmodels/pathwiseaccountingengine.cpp",
        "ql/models/marketmodels/callability/lsstrategy.cpp",
        "ql/models/marketmodels/products/multistep/callspecifiedmultiproduct.cpp",
        "ql/models/marketmodels/curvestates/lmmcurvestate.cpp",
        "ql/models/marketmodels/products/multistep/exerciseadapter.cpp",
        "ql/models/marketmodels/callability/nothingexercisevalue.cpp",
        "ql/models/marketmodels/callability/swapforwardbasissystem.cpp",
        "ql/math/distributions/normaldistribution.cpp",
        "ql/models/marketmodels/evolvers/lognormalfwdratepc.cpp",
        "ql/math/randomnumbers/mt19937uniformrng.hpp",
        "ql/math/distributions/normaldistribution.hpp",
        "ql/math/randomnumbers/mt19937uniformrng.hpp",
        "ql/models/marketmodels/curvestates/lmmcurvestate.cpp",
        "ql/math/matrix.hpp",
        "ql/math/matrix.hpp",
        "ql/math/matrix.hpp",
        "ql/math/matrix.hpp",
        "ql/math/matrix.hpp",
        "ql/math/matrix.hpp",
        "ql/math/matrix.hpp",
        "ql/models/marketmodels/discounter.cpp",
        "ql/math/statistics/generalstatistics.hpp",
        "ql/models/marketmodels/callability/nothingexercisevalue.cpp",
        "ql/models/marketmodels/driftcomputation/lmmdriftcalculator.cpp",
        "ql/models/marketmodels/driftcomputation/lmmdriftcalculator.cpp",
        "ql/models/marketmodels/callability/swapforwardbasissystem.cpp",
        "ql/models/marketmodels/callability/upperboundengine.cpp",
        "ql/models/marketmodels/products/pathwise/pathwiseproductinversefloater.cpp",
        "ql/models/marketmodels/products/pathwise/pathwiseproductcallspecified.cpp",
        "ql/methods/montecarlo/genericlsregression.cpp",
        "ql/math/matrix.hpp",
        "ql/math/matrix.hpp",
        "ql/math/matrix.hpp",
        "ql/math/matrix.hpp",
        "ql/math/matrix.hpp",
        "ql/math/matrix.hpp",
        "ql/math/matrix.hpp",
        "ql/math/distributions/normaldistribution.hpp",
        "ql/math/distributions/normaldistribution.hpp",
        "ql/models/marketmodels/pathwisediscounter.cpp",
        "ql/math/matrix.hpp",
        "ql/models/marketmodels/evolutiondescription.hpp",
        "ql/models/marketmodels/pathwisegreeks/ratepseudorootjacobian.cpp",
        "ql/models/marketmodels/pathwisegreeks/ratepseudorootjacobian.cpp",
        "ql/models/marketmodels/pathwisegreeks/ratepseudorootjacobian.cpp",
        "ql/models/marketmodels/browniangenerators/sobolbrowniangenerator.cpp",
        "ql/math/matrix.hpp",
        "ql/math/matrix.hpp",
        "ql/models/marketmodels/driftcomputation/lmmdriftcalculator.cpp",
        "ql/models/marketmodels/driftcomputation/lmmdriftcalculator.cpp",
        "ql/models/marketmodels/products/multistep/multistepinversefloater.hpp",
        "ql/models/marketmodels/pathwisegreeks/bumpinstrumentjacobian.cpp",
        "ql/math/randomnumbers/mt19937uniformrng.cpp",
        "ql/models/marketmodels/browniangenerators/mtbrowniangenerator.cpp",
        "ql/math/matrix.hpp",
        "ql/math/matrix.hpp",
        "ql/models/marketmodels/evolvers/lognormalfwdrateeuler.cpp",
        "ql/models/marketmodels/accountingengine.cpp",
        "ql/math/matrixutilities/basisincompleteordered.cpp",
        "ql/models/marketmodels/evolutiondescription.cpp",
        "ql/models/marketmodels/evolvers/lognormalfwdratepc.cpp",
        "ql/models/marketmodels/callability/lsstrategy.cpp",
        "ql/models/marketmodels/evolvers/lognormalfwdrateeuler.cpp",
        "ql/models/marketmodels/callability/swapforwardbasissystem.cpp",
        "ql/models/marketmodels/callability/upperboundengine.cpp",
        "ql/utilities/clone.hpp",
        "ql/models/marketmodels/products/pathwise/pathwiseproductcashrebate.cpp",
        "ql/models/marketmodels/products/multistep/multistepinversefloater.hpp",
        "ql/math/statistics/incrementalstatistics.cpp",
        "ql/methods/montecarlo/sample.hpp",
        "ql/models/marketmodels/pathwisegreeks/swaptionpseudojacobian.cpp",
        "ql/math/matrix.hpp",
        "ql/math/matrix.hpp",
        "ql/models/marketmodels/accountingengine.cpp",
        "ql/models/marketmodels/browniangenerators/sobolbrowniangenerator.cpp",
        "ql/models/marketmodels/products/multistep/exerciseadapter.hpp",
        "ql/models/marketmodels/callability/collectnodedata.cpp",
        "ql/math/matrix.hpp",
        "ql/math/matrix.hpp",
        "ql/math/matrix.hpp",
        "ql/math/matrix.hpp",
        "ql/models/marketmodels/pathwiseaccountingengine.cpp",
        "ql/models/marketmodels/pathwiseaccountingengine.cpp",
        "ql/models/marketmodels/pathwiseaccountingengine.cpp",
        "ql/models/marketmodels/products/multiproductcomposite.cpp"
      ]
    }
  },
  "code_snippets": [
    {
      "id": "46ca6a37-b43e-49d8-bfd0-4551b73f55b7",
      "content": "    Real LMMCurveState::discountRatio(Size i, Size j) const {\n        QL_REQUIRE(first_<numberOfRates_, \"curve state not initialized yet\");\n        QL_REQUIRE(std::min(i, j)>=first_, \"invalid index\");\n        QL_REQUIRE(std::max(i, j)<=numberOfRates_, \"invalid index\");\n        return discRatios_[i]/discRatios_[j];\n    }",
      "construct_id": "29b4f7a9-b1c6-4c10-9214-a209a0625d3c",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-03-11T14:52:17.015774",
        "updated_at": "2025-03-11T14:52:17.015787",
        "language": "cpp",
        "file": "ql/models/marketmodels/curvestates/lmmcurvestate.cpp",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "ai_run_id": null,
        "rerank_ids": null,
        "contexts": null,
        "line_numbers": {
          "start": 98,
          "end": 103
        },
        "tokens": null,
        "extraction_id": null,
        "construct_tags": [
          "RANK 1",
          "RANK 1-10",
          "FUNCTION",
          "VTUNE",
          "PROFILER"
        ]
      }
    },
    {
      "id": "af4fe21a-bead-49c3-bed0-8d1338a518fd",
      "content": "    bool MultiStepInverseFloater::nextTimeStep(\n        const CurveState& currentState,\n        std::vector<Size>& numberCashFlowsThisStep,\n        std::vector<std::vector<MarketModelMultiProduct::CashFlow> >&\n        genCashFlows)\n    {\n         Rate liborRate = currentState.forwardRate(currentIndex_);\n         Real inverseFloatingCoupon = std::max((fixedStrikes_[currentIndex_] - fixedMultipliers_[currentIndex_]*liborRate),0.0)*fixedAccruals_[currentIndex_] ;\n         Real floatingCoupon = (liborRate+floatingSpreads_[currentIndex_])*floatingAccruals_[currentIndex_];\n\n        genCashFlows[0][0].timeIndex = currentIndex_;\n        genCashFlows[0][0].amount =multiplier_*(inverseFloatingCoupon - floatingCoupon);\n\n        numberCashFlowsThisStep[0] = 1;\n        ++currentIndex_;\n\n        return (currentIndex_ == lastIndex_);\n    }",
      "construct_id": "7a73eb84-cf06-4893-99c8-179774b956e5",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-03-11T14:52:17.016683",
        "updated_at": "2025-03-11T14:52:17.016693",
        "language": "cpp",
        "file": "ql/models/marketmodels/products/multistep/multistepinversefloater.cpp",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "ai_run_id": null,
        "rerank_ids": null,
        "contexts": null,
        "line_numbers": {
          "start": 49,
          "end": 66
        },
        "tokens": null,
        "extraction_id": null,
        "construct_tags": [
          "RANK 2",
          "RANK 1-10",
          "FUNCTION",
          "VTUNE",
          "PROFILER"
        ]
      }
    },
    {
      "id": "26cdbbf0-d65b-457e-8165-14aa410a19d5",
      "content": "    bool LongstaffSchwartzExerciseStrategy::exercise(\n                                      const CurveState& currentState) const {\n\n        Size exerciseIndex = exerciseIndex_[currentIndex_-1];\n\n        CashFlow exerciseCF = exercise_->value(currentState);\n        Real exerciseValue = exerciseCF.amount *\n            rebateDiscounters_[exerciseCF.timeIndex]\n                .numeraireBonds(currentState,\n                                numeraires_[currentIndex_-1]) /\n            principalInNumerairePortfolio_;\n\n        CashFlow controlCF = control_->value(currentState);\n        Real controlValue = controlCF.amount *\n            controlDiscounters_[controlCF.timeIndex]\n                .numeraireBonds(currentState,\n                                numeraires_[currentIndex_-1]) /\n            principalInNumerairePortfolio_;\n\n        basisSystem_->values(currentState,\n                             basisValues_[exerciseIndex]);\n\n        const std::vector<Real>& alphas = basisCoefficients_[exerciseIndex];\n        Real continuationValue =\n            std::inner_product(alphas.begin(), alphas.end(),\n                               basisValues_[exerciseIndex].begin(),\n                               controlValue);\n\n        return exerciseValue >= continuationValue;\n    }",
      "construct_id": "2c9c1637-9a7f-4850-90ee-7308b51ac997",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-03-11T14:52:17.017750",
        "updated_at": "2025-03-11T14:52:17.017762",
        "language": "cpp",
        "file": "ql/models/marketmodels/callability/lsstrategy.cpp",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "ai_run_id": null,
        "rerank_ids": null,
        "contexts": null,
        "line_numbers": {
          "start": 105,
          "end": 134
        },
        "tokens": null,
        "extraction_id": null,
        "construct_tags": [
          "RANK 1-10",
          "FUNCTION",
          "VTUNE",
          "PROFILER",
          "RANK 3"
        ]
      }
    },
    {
      "id": "bf083c54-ea6b-455b-a46f-426205938b06",
      "content": "    Real MTBrownianGenerator::nextStep(std::vector<Real>& output) {\n        #if defined(QL_EXTRA_SAFETY_CHECKS)\n        QL_REQUIRE(output.size() == factors_, \"size mismatch\");\n        QL_REQUIRE(lastStep_<steps_, \"uniform sequence exhausted\");\n        #endif\n        // no copying, just fetching a reference\n        const std::vector<Real>& currentSequence = generator_.lastSequence().value;\n        Size start = lastStep_*factors_, end = (lastStep_+1)*factors_;\n        std::transform(currentSequence.begin()+start,\n                       currentSequence.begin()+end,\n                       output.begin(),\n                       inverseCumulative_);\n        ++lastStep_;\n        return 1.0;\n    }",
      "construct_id": "c1b09fff-ddf2-4bf8-962d-a3f523ca4d13",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-03-11T14:52:17.018614",
        "updated_at": "2025-03-11T14:52:17.018624",
        "language": "cpp",
        "file": "ql/models/marketmodels/browniangenerators/mtbrowniangenerator.cpp",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "ai_run_id": null,
        "rerank_ids": null,
        "contexts": null,
        "line_numbers": {
          "start": 29,
          "end": 43
        },
        "tokens": null,
        "extraction_id": null,
        "construct_tags": [
          "RANK 4",
          "RANK 1-10",
          "FUNCTION",
          "VTUNE",
          "PROFILER"
        ]
      }
    },
    {
      "id": "0fcfd638-70e2-41fe-a39a-c7566db4abf4",
      "content": "    Rate LMMCurveState::coterminalSwapAnnuity(Size numeraire,\n                                              Size i) const {\n        QL_REQUIRE(first_<numberOfRates_, \"curve state not initialized yet\");\n        QL_REQUIRE(numeraire>=first_ && numeraire<=numberOfRates_,\n                   \"invalid numeraire\");\n        QL_REQUIRE(i>=first_ && i<=numberOfRates_, \"invalid index\");\n        //        coterminalFromDiscountRatios(first_,\n        //                                   discRatios_, rateTaus_,\n        //                                 cotSwapRates_, cotAnnuities_);\n\n        if (firstCotAnnuityComped_ <=i)\n            return  cotAnnuities_[i]/discRatios_[numeraire];\n\n        if (firstCotAnnuityComped_ == numberOfRates_)\n        {\n            cotAnnuities_[numberOfRates_-1] = rateTaus_[numberOfRates_-1]*discRatios_[numberOfRates_];\n            --firstCotAnnuityComped_;\n        }\n\n        for (int j= static_cast<int>(firstCotAnnuityComped_)-1; j >=static_cast<int>(i); --j)\n            cotAnnuities_[j] = cotAnnuities_[j+1]+rateTaus_[j]*discRatios_[j+1];\n\n        firstCotAnnuityComped_ = i;\n\n        return cotAnnuities_[i]/discRatios_[numeraire];\n    }",
      "construct_id": "6858ed1c-e1ad-45ac-84f1-5e8b58f67b04",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-03-11T14:52:17.019545",
        "updated_at": "2025-03-11T14:52:17.019556",
        "language": "cpp",
        "file": "ql/models/marketmodels/curvestates/lmmcurvestate.cpp",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "ai_run_id": null,
        "rerank_ids": null,
        "contexts": null,
        "line_numbers": {
          "start": 111,
          "end": 136
        },
        "tokens": null,
        "extraction_id": null,
        "construct_tags": [
          "RANK 1-10",
          "FUNCTION",
          "VTUNE",
          "PROFILER",
          "RANK 5"
        ]
      }
    },
    {
      "id": "276015e4-7e3c-422e-8fa0-343aab62b074",
      "content": "    void LMMCurveState::setOnForwardRates(const std::vector<Rate>& rates,\n                                          Size firstValidIndex) {\n            QL_REQUIRE(rates.size()==numberOfRates_,\n                       \"rates mismatch: \" <<\n                       numberOfRates_ << \" required, \" <<\n                       rates.size() << \" provided\");\n            QL_REQUIRE(firstValidIndex<numberOfRates_,\n                       \"first valid index must be less than \" <<\n                       numberOfRates_ << \": \" <<\n                       firstValidIndex << \" not allowed\");\n\n        // first copy input...\n        first_ = firstValidIndex;\n        std::copy(rates.begin()+first_, rates.end(),\n                  forwardRates_.begin()+first_);\n        // ...then calculate discount ratios\n\n        // taken care at constructor time\n        //discRatios_[numberOfRates_] = 1.0;\n        for (Size i=first_; i<numberOfRates_; ++i)\n            discRatios_[i+1]=discRatios_[i]/(1.0+forwardRates_[i]*rateTaus_[i]);\n\n        // lazy evaluation of:\n        // - coterminal swap rates/annuities\n        // - constant maturity swap rates/annuities\n\n        firstCotAnnuityComped_ = numberOfRates_;\n    }",
      "construct_id": "50b288e7-e8fa-43ed-9391-3976b15f0581",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-03-11T14:52:17.020497",
        "updated_at": "2025-03-11T14:52:17.020507",
        "language": "cpp",
        "file": "ql/models/marketmodels/curvestates/lmmcurvestate.cpp",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "ai_run_id": null,
        "rerank_ids": null,
        "contexts": null,
        "line_numbers": {
          "start": 41,
          "end": 68
        },
        "tokens": null,
        "extraction_id": null,
        "construct_tags": [
          "RANK 1-10",
          "FUNCTION",
          "VTUNE",
          "PROFILER",
          "RANK 6"
        ]
      }
    },
    {
      "id": "44a2d3d5-fc80-4491-9903-9561ad93cdf6",
      "content": "    void PathwiseVegasOuterAccountingEngine::multiplePathValuesElementary(std::vector<Real>& means, std::vector<Real>& errors,\n        Size numberOfPaths)\n    {\n        Size numberOfElementaryVegas = numberRates_*numberSteps_*factors_;\n\n        std::vector<Real> values(product_->numberOfProducts()*(1+numberRates_+numberOfElementaryVegas));\n        means.resize(values.size());\n        errors.resize(values.size());\n        std::vector<Real> sums(values.size(),0.0);\n        std::vector<Real> sumsqs(values.size(),0.0);\n\n\n\n        for (Size i=0; i<numberOfPaths; ++i)\n        {\n          singlePathValues(values);\n          \n          for (Size j=0; j < values.size(); ++j)\n            {\n                sums[j] += values[j];\n                sumsqs[j] += values[j]*values[j];\n\n            }\n        }\n\n        for (Size j=0; j < values.size(); ++j)\n            {\n                means[j] = sums[j]/numberOfPaths;\n                Real meanSq = sumsqs[j]/numberOfPaths;\n                Real variance = meanSq - means[j]*means[j];\n                errors[j] = std::sqrt(variance/numberOfPaths);\n\n            }\n    }",
      "construct_id": "a600ce06-2186-41fa-857d-e0116cce8460",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-03-11T14:52:17.021678",
        "updated_at": "2025-03-11T14:52:17.021688",
        "language": "cpp",
        "file": "ql/models/marketmodels/pathwiseaccountingengine.cpp",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "ai_run_id": null,
        "rerank_ids": null,
        "contexts": null,
        "line_numbers": {
          "start": 1111,
          "end": 1144
        },
        "tokens": null,
        "extraction_id": null,
        "construct_tags": [
          "RANK 1-10",
          "FUNCTION",
          "VTUNE",
          "PROFILER",
          "RANK 7"
        ]
      }
    },
    {
      "id": "e0ae2fb1-7edc-4df6-ab5a-240e3462cfc4",
      "content": "    void LongstaffSchwartzExerciseStrategy::nextStep(\n                                            const CurveState& currentState) {\n        principalInNumerairePortfolio_ = newPrincipal_;\n\n        if (isRebateTime_[currentIndex_])\n            exercise_->nextStep(currentState);\n        if (isControlTime_[currentIndex_])\n            control_->nextStep(currentState);\n        if (isBasisTime_[currentIndex_])\n            basisSystem_->nextStep(currentState);\n\n        if (currentIndex_ < numeraires_.size()-1) {\n            Size numeraire = numeraires_[currentIndex_];\n            Size nextNumeraire = numeraires_[currentIndex_+1];\n            newPrincipal_ *=\n                currentState.discountRatio(numeraire, nextNumeraire);\n        }\n\n        ++currentIndex_;\n    }",
      "construct_id": "6f4cd7a1-c68e-467d-ae43-2d7b5301462a",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-03-11T14:52:17.022554",
        "updated_at": "2025-03-11T14:52:17.022564",
        "language": "cpp",
        "file": "ql/models/marketmodels/callability/lsstrategy.cpp",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "ai_run_id": null,
        "rerank_ids": null,
        "contexts": null,
        "line_numbers": {
          "start": 136,
          "end": 155
        },
        "tokens": null,
        "extraction_id": null,
        "construct_tags": [
          "RANK 8",
          "RANK 1-10",
          "FUNCTION",
          "VTUNE",
          "PROFILER"
        ]
      }
    },
    {
      "id": "742337ad-9151-408b-a5fb-dbf50d6ceba2",
      "content": "    bool CallSpecifiedMultiProduct::nextTimeStep(\n            const CurveState& currentState,\n            std::vector<Size>& numberCashFlowsThisStep,\n            std::vector<std::vector<CashFlow> >& cashFlowsGenerated) \n    {\n\n        bool isUnderlyingTime = isPresent_[0][currentIndex_];\n        bool isExerciseTime = isPresent_[1][currentIndex_];\n        bool isRebateTime = isPresent_[2][currentIndex_];\n        bool isStrategyRelevantTime = isPresent_[3][currentIndex_];\n\n        bool done = false;\n\n        if (!wasCalled_ && isStrategyRelevantTime)\n            strategy_->nextStep(currentState);\n\n\n        if (!wasCalled_ && isExerciseTime && callable_)\n            wasCalled_ = strategy_->exercise(currentState);\n\n        if (wasCalled_) \n        {\n            if (isRebateTime) \n            {\n                done = rebate_->nextTimeStep(currentState,\n                                             numberCashFlowsThisStep,\n                                             cashFlowsGenerated);\n                for (Size i=0; i<numberCashFlowsThisStep.size(); ++i)\n                    for (Size j=0; j<numberCashFlowsThisStep[i]; ++j)\n                        cashFlowsGenerated[i][j].timeIndex += rebateOffset_;\n            }\n        } \n        else \n        {\n            if (isRebateTime)\n                rebate_->nextTimeStep(currentState,\n                                      dummyCashFlowsThisStep_,\n                                      dummyCashFlowsGenerated_);\n            if (isUnderlyingTime)\n                done = underlying_->nextTimeStep(currentState,\n                                                 numberCashFlowsThisStep,\n                                                 cashFlowsGenerated);\n        }\n\n        ++currentIndex_;\n        return done || currentIndex_ == evolution_.evolutionTimes().size();\n    }",
      "construct_id": "140a3942-df91-4a30-87c7-79d69586b11f",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-03-11T14:52:17.023837",
        "updated_at": "2025-03-11T14:52:17.023869",
        "language": "cpp",
        "file": "ql/models/marketmodels/products/multistep/callspecifiedmultiproduct.cpp",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "ai_run_id": null,
        "rerank_ids": null,
        "contexts": null,
        "line_numbers": {
          "start": 122,
          "end": 168
        },
        "tokens": null,
        "extraction_id": null,
        "construct_tags": [
          "RANK 1-10",
          "FUNCTION",
          "VTUNE",
          "PROFILER",
          "RANK 9"
        ]
      }
    },
    {
      "id": "c1f19259-f954-41bb-b5af-2b8eb26a5cdc",
      "content": "    Rate LMMCurveState::coterminalSwapRate(Size i) const {\n        QL_REQUIRE(first_<numberOfRates_, \"curve state not initialized yet\");\n        QL_REQUIRE(i>=first_ && i<=numberOfRates_, \"invalid index\");\n        //    coterminalFromDiscountRatios(first_,\n        //                               discRatios_, rateTaus_,\n        //                             cotSwapRates_, cotAnnuities_);\n        //      return cotSwapRates_[i];\n\n        Real res = (discRatios_[i]/ discRatios_[numberOfRates_] -1.0)/coterminalSwapAnnuity(numberOfRates_,i);\n        return res;\n    }",
      "construct_id": "7c40db38-7686-43e5-9eb9-6036eafa779a",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-03-11T14:52:17.024637",
        "updated_at": "2025-03-11T14:52:17.024647",
        "language": "cpp",
        "file": "ql/models/marketmodels/curvestates/lmmcurvestate.cpp",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "ai_run_id": null,
        "rerank_ids": null,
        "contexts": null,
        "line_numbers": {
          "start": 138,
          "end": 148
        },
        "tokens": null,
        "extraction_id": null,
        "construct_tags": [
          "RANK 10",
          "RANK 1-10",
          "FUNCTION",
          "VTUNE",
          "PROFILER"
        ]
      }
    }
  ]
}