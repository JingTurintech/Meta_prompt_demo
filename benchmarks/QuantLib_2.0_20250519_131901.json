{
  "metadata": {
    "collected_at": "20250519_131901",
    "project_info": {
      "project_id": "17789b06-49be-4dec-b2bc-2d741a350328",
      "name": "QuantLib 2.0",
      "description": "C++ QuantLib ver 1.37 - 75e2fb7 ",
      "language": "cpp"
    }
  },
  "code_snippets": [
    {
      "id": "6e6f56f6-c2ef-4c8e-a528-9baf77e894c8",
      "content": "        Size direction,         const ext::shared_ptr<FdmMesher>& mesher)     : direction_(direction),       i0_       (new Size[mesher->layout()->size()]),       i2_       (new Size[mesher->layout()->size()]),       reverseIndex_ (new Size[mesher->layout()->size()]),       lower_    (new Real[mesher->layout()->size()]),       diag_     (new Real[mesher->layout()->size()]),       upper_    (new Real[mesher->layout()->size()]),       mesher_(mesher) {          std::vector<Size> newDim(mesher->layout()->dim());         std::iter_swap(newDim.begin(), newDim.begin()+direction_);         std::vector<Size> newSpacing = FdmLinearOpLayout(newDim).spacing();         std::iter_swap(newSpacing.begin(), newSpacing.begin()+direction_);          for (const auto& iter : *mesher->layout()) {             const Size i = iter.index();              i0_[i] = mesher->layout()->neighbourhood(iter, direction, -1);             i2_[i] = mesher->layout()->neighbourhood(iter, direction,  1);              const std::vector<Size>& coordinates = iter.coordinates();             const Size newIndex =                   std::inner_product(coordinates.begin(), coordinates.end(),                                      newSpacing.begin(), Size(0));             reverseIndex_[newIndex] = i;         }     }",
      "construct_id": "2cab6b8a-1503-4485-9408-bc2f56c59816",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-04-14T08:14:06.935993",
        "updated_at": "2025-04-14T08:14:06.936006",
        "language": "cpp",
        "file": "ql/methods/finitedifferences/operators/triplebandlinearop.cpp",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "line_numbers": {
          "start": 30,
          "end": 59
        },
        "tokens": null,
        "construct_tags": [
          "RANK 1",
          "RANK 1-10",
          "FUNCTION",
          "VTUNE",
          "PROFILER"
        ]
      }
    },
    {
      "id": "4f3f6fdd-9e97-46d7-8f3e-c4f90896b4a7",
      "content": "#include <vector>\n#include <numeric> // for std::inner_product\n#include <algorithm> // for std::swap\n\nTripleBandLinearOp::TripleBandLinearOp(\n    Size direction,\n    const ext::shared_ptr<FdmMesher>& mesher)\n    : direction_(direction),\n      i0_(mesher->layout()->size()),\n      i2_(mesher->layout()->size()),\n      reverseIndex_(mesher->layout()->size()),\n      lower_(mesher->layout()->size()),\n      diag_(mesher->layout()->size()),\n      upper_(mesher->layout()->size()),\n      mesher_(mesher) {\n\n    const auto& layout = mesher_->layout(); // Cache layout pointer\n\n    std::vector<Size> newDim = layout->dim();\n    std::swap(newDim[0], newDim[direction_]); // More readable swap\n\n    std::vector<Size> newSpacing = FdmLinearOpLayout(newDim).spacing();\n    std::swap(newSpacing[0], newSpacing[direction_]); // More readable swap\n\n\n    for (const auto& iter : *layout) {\n        const Size i = iter.index();\n\n        i0_[i] = layout->neighbourhood(iter, direction, -1);\n        i2_[i] = layout->neighbourhood(iter, direction, 1);\n\n        const std::vector<Size>& coordinates = iter.coordinates();\n        reverseIndex_[std::inner_product(coordinates.begin(), coordinates.end(),\n                                           newSpacing.begin(), Size(0))] = i;\n    }\n}\n",
      "construct_id": "2cab6b8a-1503-4485-9408-bc2f56c59816",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-04-14T13:49:31.563893",
        "updated_at": "2025-04-14T13:49:31.563896",
        "language": "cpp",
        "file": "ql/methods/finitedifferences/operators/triplebandlinearop.cpp",
        "name": "u-f9616",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "line_numbers": {
          "start": 30,
          "end": 59
        },
        "tokens": null,
        "construct_tags": [
          "RANK 1",
          "RANK 1-10",
          "FUNCTION",
          "VTUNE",
          "PROFILER"
        ]
      }
    },
    {
      "id": "ebff35f7-67b2-4397-a723-88f788d34440",
      "content": "    TripleBandLinearOp::TripleBandLinearOp(\n        Size direction,\n        const ext::shared_ptr<FdmMesher>& mesher)\n    : direction_(direction),\n      i0_       (new Size[mesher->layout()->size()]),\n      i2_       (new Size[mesher->layout()->size()]),\n      reverseIndex_ (new Size[mesher->layout()->size()]),\n      lower_    (new Real[mesher->layout()->size()]),\n      diag_     (new Real[mesher->layout()->size()]),\n      upper_    (new Real[mesher->layout()->size()]),\n      mesher_(mesher) {\n\n        std::vector<Size> newDim(mesher->layout()->dim());\n        std::iter_swap(newDim.begin(), newDim.begin()+direction_);\n        std::vector<Size> newSpacing = FdmLinearOpLayout(newDim).spacing();\n        std::iter_swap(newSpacing.begin(), newSpacing.begin()+direction_);\n\n        for (const auto& iter : *mesher->layout()) {\n            const Size i = iter.index();\n\n            i0_[i] = mesher->layout()->neighbourhood(iter, direction, -1);\n            i2_[i] = mesher->layout()->neighbourhood(iter, direction,  1);\n\n            const std::vector<Size>& coordinates = iter.coordinates();\n            const Size newIndex =\n                  std::inner_product(coordinates.begin(), coordinates.end(),\n                                     newSpacing.begin(), Size(0));\n            reverseIndex_[newIndex] = i;\n        }\n    }",
      "construct_id": "2cab6b8a-1503-4485-9408-bc2f56c59816",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-04-14T14:27:02.608898",
        "updated_at": "2025-04-14T14:27:02.608901",
        "language": "cpp",
        "file": "ql/methods/finitedifferences/operators/triplebandlinearop.cpp",
        "name": "A-gen2pop0-9bced",
        "imports": [],
        "file_operation": "edit",
        "enabled": false,
        "line_numbers": {
          "start": 30,
          "end": 59
        },
        "tokens": null,
        "construct_tags": [
          "RANK 1",
          "RANK 1-10",
          "FUNCTION",
          "VTUNE",
          "PROFILER"
        ]
      }
    },
    {
      "id": "1dbd01a3-c3c8-40f8-9c33-9595a3c510b4",
      "content": "    : direction_(m.direction_),       i0_   (new Size[m.mesher_->layout()->size()]),       i2_   (new Size[m.mesher_->layout()->size()]),       reverseIndex_(new Size[m.mesher_->layout()->size()]),       lower_(new Real[m.mesher_->layout()->size()]),       diag_ (new Real[m.mesher_->layout()->size()]),       upper_(new Real[m.mesher_->layout()->size()]),       mesher_(m.mesher_) {         const Size len = m.mesher_->layout()->size();         std::copy(m.i0_.get(), m.i0_.get() + len, i0_.get());         std::copy(m.i2_.get(), m.i2_.get() + len, i2_.get());         std::copy(m.reverseIndex_.get(), m.reverseIndex_.get()+len,                   reverseIndex_.get());         std::copy(m.lower_.get(), m.lower_.get() + len, lower_.get());         std::copy(m.diag_.get(),  m.diag_.get() + len,  diag_.get());         std::copy(m.upper_.get(), m.upper_.get() + len, upper_.get());     }",
      "construct_id": "d5d40388-ae44-4d1b-9c5c-199e68bb7ebd",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-04-14T08:14:06.936685",
        "updated_at": "2025-04-14T08:14:06.936695",
        "language": "cpp",
        "file": "ql/methods/finitedifferences/operators/triplebandlinearop.cpp",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "line_numbers": {
          "start": 61,
          "end": 78
        },
        "tokens": null,
        "construct_tags": [
          "RANK 2",
          "RANK 1-10",
          "FUNCTION",
          "VTUNE",
          "PROFILER"
        ]
      }
    },
    {
      "id": "08c24fc8-dcd4-49db-9476-cc0bccd8c2dd",
      "content": "    Matrix::row_begin(Size i) const {         #if defined(QL_EXTRA_SAFETY_CHECKS)         QL_REQUIRE(i<rows_,                    \"row index (\" << i << \") must be less than \" << rows_ <<                    \": matrix cannot be accessed out of range\");         #endif         return data_.get()+columns_*i;     }",
      "construct_id": "cf39abb4-385b-4f5d-8b79-976ab4777690",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-04-14T08:14:06.937274",
        "updated_at": "2025-04-14T08:14:06.937283",
        "language": "cpp",
        "file": "ql/math/matrix.hpp",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "line_numbers": {
          "start": 359,
          "end": 367
        },
        "tokens": null,
        "construct_tags": [
          "RANK 1-10",
          "FUNCTION",
          "VTUNE",
          "PROFILER",
          "RANK 3"
        ]
      }
    },
    {
      "id": "c711fc66-acc7-44b1-969f-9da53469ce42",
      "content": "        #if defined(QL_EXTRA_SAFETY_CHECKS)         QL_REQUIRE(i<rows_,                    \"row index (\" << i << \") must be less than \" << rows_ <<                    \": matrix cannot be accessed out of range\");         #endif         return data_.get()+columns_*i;     }",
      "construct_id": "78b4a320-a9f9-42f6-9141-00433e45375e",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-04-14T08:14:06.937820",
        "updated_at": "2025-04-14T08:14:06.937828",
        "language": "cpp",
        "file": "ql/math/matrix.hpp",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "line_numbers": {
          "start": 369,
          "end": 376
        },
        "tokens": null,
        "construct_tags": [
          "RANK 4",
          "RANK 1-10",
          "FUNCTION",
          "VTUNE",
          "PROFILER"
        ]
      }
    },
    {
      "id": "aec796fd-f4d9-4fb4-a466-6ddad167169b",
      "content": "                                         Size i,                                          Size spanningForwards) const{         QL_REQUIRE(first_<numberOfRates_, \"curve state not initialized yet\");         QL_REQUIRE(numeraire>=first_ && numeraire<=numberOfRates_,                    \"invalid numeraire\");         QL_REQUIRE(i>=first_ && i<=numberOfRates_, \"invalid index\");         if (spanningForwards==spanningFwds_)             return cmSwapAnnuities_[i]/discRatios_[numeraire];         else {             constantMaturityFromDiscountRatios(spanningForwards, first_,                                                discRatios_, rateTaus_,                                                irrCMSwapRates_,                                                irrCMSwapAnnuities_);             return irrCMSwapAnnuities_[i]/discRatios_[numeraire];         }     }",
      "construct_id": "94dd3854-feba-4593-b7f1-ee980031b1d0",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-04-14T08:14:06.938470",
        "updated_at": "2025-04-14T08:14:06.938479",
        "language": "cpp",
        "file": "ql/models/marketmodels/curvestates/cmswapcurvestate.cpp",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "line_numbers": {
          "start": 122,
          "end": 138
        },
        "tokens": null,
        "construct_tags": [
          "RANK 1-10",
          "FUNCTION",
          "VTUNE",
          "PROFILER",
          "RANK 5"
        ]
      }
    },
    {
      "id": "03edc52c-0930-4015-a4e8-036fa55b3b2d",
      "content": "            return size_;         }",
      "construct_id": "1a82c235-d485-4db3-b8d2-7e06ea59b8cf",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-04-14T08:14:06.939022",
        "updated_at": "2025-04-14T08:14:06.939031",
        "language": "cpp",
        "file": "ql/methods/finitedifferences/operators/fdmlinearoplayout.hpp",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "line_numbers": {
          "start": 61,
          "end": 63
        },
        "tokens": null,
        "construct_tags": [
          "RANK 1-10",
          "FUNCTION",
          "VTUNE",
          "PROFILER",
          "RANK 6"
        ]
      }
    },
    {
      "id": "10207796-59ef-4a5e-824a-ccb1dfbb46f1",
      "content": "        Array& operator=(const Array&);",
      "construct_id": "2e735078-c494-4eed-93cb-db11267d08b7",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-04-14T08:14:07.028266",
        "updated_at": "2025-04-14T08:14:07.028285",
        "language": "cpp",
        "file": "ql/math/array.hpp",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "line_numbers": {
          "start": 74,
          "end": 74
        },
        "tokens": null,
        "construct_tags": [
          "RANK 1-10",
          "FUNCTION",
          "VTUNE",
          "PROFILER",
          "RANK 7"
        ]
      }
    },
    {
      "id": "594f5213-4f20-4e4c-81af-048dfae2567d",
      "content": "                                          Size i,                                           const Array& values,                                           const Array& conversionProbability,                                           const Array& spreadAdjustedRate,                                           Array& newValues,                                           Array& newConversionProbability,                                           Array& newSpreadAdjustedRate) const {          for (Size j=0; j<this->size(i); j++) {              // new conversion probability is calculated via backward             // induction using up and down probabilities on tree on             // previous conversion probabilities, ie weighted average             // of previous probabilities.             newConversionProbability[j] =                 this->pd_*conversionProbability[j] +                 this->pu_*conversionProbability[j+1];              // Use blended discounting rate             newSpreadAdjustedRate[j] =                 newConversionProbability[j] * this->riskFreeRate_ +                 (1-newConversionProbability[j])*(this->riskFreeRate_+creditSpread_);              newValues[j] =                 (this->pd_*values[j]/(1+(spreadAdjustedRate[j]*this->dt_)))               + (this->pu_*values[j+1]/(1+(spreadAdjustedRate[j+1]*this->dt_)));          }     }",
      "construct_id": "a01f3bf1-69df-4ed7-bac9-60ae927b85bd",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-04-14T08:14:07.029023",
        "updated_at": "2025-04-14T08:14:07.029032",
        "language": "cpp",
        "file": "ql/methods/lattices/tflattice.hpp",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "line_numbers": {
          "start": 87,
          "end": 116
        },
        "tokens": null,
        "construct_tags": [
          "RANK 8",
          "RANK 1-10",
          "FUNCTION",
          "VTUNE",
          "PROFILER"
        ]
      }
    }
  ]
}