{
  "metadata": {
    "collected_at": "20250610_170149",
    "project_info": {
      "project_id": "0126bc6f-57c0-4148-bd3e-3d30ea7c6099",
      "name": "Langflow",
      "description": "Langflow is a low-code app builder for RAG and multi-agent AI applications. It\u2019s Python-based and agnostic to any model, API, or database.",
      "language": "py"
    }
  },
  "code_snippets": [
    {
      "id": "e3d99f67-2bf9-49da-884c-cbfa8a78b0b7",
      "content": "    def _create_service(self, service_name: ServiceType, default: ServiceFactory | None = None) -> None:\n        \"\"\"Create a new service given its name, handling dependencies.\"\"\"\n        logger.debug(f\"Create service {service_name}\")\n        self._validate_service_creation(service_name, default)\n\n        # Create dependencies first\n        factory = self.factories.get(service_name)\n        if factory is None and default is not None:\n            self.register_factory(default)\n            factory = default\n        if factory is None:\n            msg = f\"No factory registered for {service_name}\"\n            raise NoFactoryRegisteredError(msg)\n        for dependency in factory.dependencies:\n            if dependency not in self.services:\n                self._create_service(dependency)\n\n        # Collect the dependent services\n        dependent_services = {dep.value: self.services[dep] for dep in factory.dependencies}\n\n        # Create the actual service\n        self.services[service_name] = self.factories[service_name].create(**dependent_services)\n        self.services[service_name].set_ready()",
      "construct_id": "02a215db-824f-436e-b295-7fc14e6ca880",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-02-27T18:52:27.922000",
        "updated_at": "2025-02-27T18:52:27.922000",
        "language": "py",
        "file": "src/backend/base/langflow/services/manager.py",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "line_numbers": {
          "start": 53,
          "end": 75
        },
        "tokens": null,
        "construct_tags": [
          "RANK 1-10",
          "FUNCTION",
          "PROFILER",
          "SPEEDSCOPE",
          "RANK 9"
        ]
      }
    },
    {
      "id": "fc1cfe63-86d9-4d22-9d5c-5387c226624e",
      "content": "    def get_factories():\n        from langflow.services.factory import ServiceFactory\n        from langflow.services.schema import ServiceType\n\n        service_names = [ServiceType(service_type).value.replace(\"_service\", \"\") for service_type in ServiceType]\n        base_module = \"langflow.services\"\n        factories = []\n\n        for name in service_names:\n            try:\n                module_name = f\"{base_module}.{name}.factory\"\n                module = importlib.import_module(module_name)\n\n                # Find all classes in the module that are subclasses of ServiceFactory\n                for _, obj in inspect.getmembers(module, inspect.isclass):\n                    if issubclass(obj, ServiceFactory) and obj is not ServiceFactory:\n                        factories.append(obj())\n                        break\n\n            except Exception as exc:\n                logger.exception(exc)\n                msg = f\"Could not initialize services. Please check your settings. Error in {name}.\"\n                raise RuntimeError(msg) from exc\n\n        return factories",
      "construct_id": "0b1b8eb5-769b-4510-a3f1-6e46af5fc0a1",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-02-27T18:52:27.922000",
        "updated_at": "2025-02-27T18:52:27.922000",
        "language": "py",
        "file": "src/backend/base/langflow/services/manager.py",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "line_numbers": {
          "start": 104,
          "end": 128
        },
        "tokens": null,
        "construct_tags": [
          "RANK 1-10",
          "FUNCTION",
          "PROFILER",
          "SPEEDSCOPE",
          "RANK 3"
        ]
      }
    },
    {
      "id": "85f81bdf-7a28-4d34-9870-453f1dedc78f",
      "content": "    def __init__(self) -> None:\n        super().__init__(AuthService)",
      "construct_id": "1ddd1072-f4b5-483c-9604-389f7bb6bd00",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-02-27T18:52:27.922000",
        "updated_at": "2025-02-27T18:52:27.922000",
        "language": "py",
        "file": "src/backend/base/langflow/services/auth/factory.py",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "line_numbers": {
          "start": 10,
          "end": 11
        },
        "tokens": null,
        "construct_tags": [
          "RANK 4",
          "RANK 1-10",
          "FUNCTION",
          "PROFILER",
          "SPEEDSCOPE"
        ]
      }
    },
    {
      "id": "0d09f6a5-4c99-4425-b6d5-50b14d6e8cf4",
      "content": "def import_all_services_into_a_dict():\n    # Services are all in langflow.services.{service_name}.service\n    # and are subclass of Service\n    # We want to import all of them and put them in a dict\n    # to use as globals\n    from langflow.services.base import Service\n\n    services = {}\n    for service_type in ServiceType:\n        try:\n            service_name = ServiceType(service_type).value.replace(\"_service\", \"\")\n            module_name = f\"langflow.services.{service_name}.service\"\n            module = importlib.import_module(module_name)\n            services.update(\n                {\n                    name: obj\n                    for name, obj in inspect.getmembers(module, inspect.isclass)\n                    if issubclass(obj, Service) and obj is not Service\n                }\n            )\n        except Exception as exc:\n            logger.exception(exc)\n            msg = \"Could not initialize services. Please check your settings.\"\n            raise RuntimeError(msg) from exc\n    return services",
      "construct_id": "1f9db993-3755-4cf3-bd01-a606827cb457",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-02-27T18:52:27.922000",
        "updated_at": "2025-02-27T18:52:27.922000",
        "language": "py",
        "file": "src/backend/base/langflow/services/factory.py",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "line_numbers": {
          "start": 64,
          "end": 88
        },
        "tokens": null,
        "construct_tags": [
          "RANK 1-10",
          "FUNCTION",
          "PROFILER",
          "SPEEDSCOPE",
          "RANK 6"
        ]
      }
    },
    {
      "id": "6d987e9a-fc8a-4e9a-aeec-854f2457d322",
      "content": "        results: Dict[str, float] = {}\n        \n        # Test 1: Basic Settings Service Access\n        async def get_settings():\n            settings_service = get_settings_service()\n            return settings_service.settings\n            \n        results['settings_access'] = await benchmark_operation(\n            get_settings, \n            iterations=100  # Reduced iterations\n        )\n\n        # Test 2: Cache Operations\n        async def cache_operation():\n            from langflow.interface.utils import setup_llm_caching\n            setup_llm_caching()\n            \n        results['cache_setup'] = await benchmark_operation(\n            cache_operation,",
      "construct_id": "4c039e01-f646-4e6e-a3bd-b3103aa21e4b",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-02-27T18:52:27.922000",
        "updated_at": "2025-02-27T18:52:27.922000",
        "language": "py",
        "file": "src/backend/tests/benchmarks/benchmark_operations.py",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "line_numbers": {
          "start": 20,
          "end": 38
        },
        "tokens": null,
        "construct_tags": [
          "RANK 10",
          "RANK 1-10",
          "FUNCTION",
          "PROFILER",
          "SPEEDSCOPE"
        ]
      }
    },
    {
      "id": "867279af-a4e5-4c80-9982-aaee0ae0c945",
      "content": "    def register_factories(self) -> None:\n        for factory in self.get_factories():\n            try:\n                self.register_factory(factory)\n            except Exception:  # noqa: BLE001\n                logger.exception(f\"Error initializing {factory}\")",
      "construct_id": "70e10078-1ac6-49ed-8b08-8a028e056946",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-02-27T18:52:27.922000",
        "updated_at": "2025-02-27T18:52:27.922000",
        "language": "py",
        "file": "src/backend/base/langflow/services/manager.py",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "line_numbers": {
          "start": 30,
          "end": 35
        },
        "tokens": null,
        "construct_tags": [
          "RANK 2",
          "RANK 1-10",
          "FUNCTION",
          "PROFILER",
          "SPEEDSCOPE"
        ]
      }
    },
    {
      "id": "20dd75b8-d168-421f-858e-f90d7db6fcfd",
      "content": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )\n\n    if connectable.dialect.name == \"sqlite\":\n        # See https://docs.sqlalchemy.org/en/20/dialects/sqlite.html#serializable-isolation-savepoints-transactional-ddl\n        listen(connectable, \"connect\", _sqlite_do_connect)\n        listen(connectable, \"begin\", _sqlite_do_begin)\n\n    with connectable.connect() as connection:\n        context.configure(connection=connection, target_metadata=target_metadata, render_as_batch=True)\n\n        with context.begin_transaction():\n            if connection.dialect.name == \"postgresql\":\n                connection.execute(text(\"SET LOCAL lock_timeout = '60s';\"))\n                connection.execute(text(\"SELECT pg_advisory_xact_lock(112233);\"))\n            context.run_migrations()",
      "construct_id": "c738a890-2717-44a3-95d4-13fa773b4dd1",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-02-27T18:52:27.922000",
        "updated_at": "2025-02-27T18:52:27.922000",
        "language": "py",
        "file": "src/backend/base/langflow/alembic/env.py",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "line_numbers": {
          "start": 71,
          "end": 96
        },
        "tokens": null,
        "construct_tags": [
          "RANK 8",
          "RANK 1-10",
          "FUNCTION",
          "PROFILER",
          "SPEEDSCOPE"
        ]
      }
    },
    {
      "id": "7f747287-d1d3-45b6-849d-ad4e4abb1928",
      "content": "    def __init__(self) -> None:\n        self.services: dict[str, Service] = {}\n        self.factories: dict[str, ServiceFactory] = {}\n        self.register_factories()\n        self.keyed_lock = KeyedMemoryLockManager()",
      "construct_id": "c869d23f-f632-4368-8b8c-2594e57d2ea5",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-02-27T18:52:27.922000",
        "updated_at": "2025-02-27T18:52:27.922000",
        "language": "py",
        "file": "src/backend/base/langflow/services/manager.py",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "line_numbers": {
          "start": 24,
          "end": 28
        },
        "tokens": null,
        "construct_tags": [
          "RANK 1",
          "RANK 1-10",
          "FUNCTION",
          "PROFILER",
          "SPEEDSCOPE"
        ]
      }
    },
    {
      "id": "39c6f5e0-8d11-49ea-b82e-9dc4005661ce",
      "content": "    def __init__(\n        self,\n        service_class,\n    ) -> None:\n        self.service_class = service_class\n        self.dependencies = infer_service_types(self, import_all_services_into_a_dict())",
      "construct_id": "c8924d9c-b293-4d5e-809d-3bd1d7a08295",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-02-27T18:52:27.922000",
        "updated_at": "2025-02-27T18:52:27.922000",
        "language": "py",
        "file": "src/backend/base/langflow/services/factory.py",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "line_numbers": {
          "start": 15,
          "end": 20
        },
        "tokens": null,
        "construct_tags": [
          "RANK 1-10",
          "FUNCTION",
          "PROFILER",
          "SPEEDSCOPE",
          "RANK 5"
        ]
      }
    },
    {
      "id": "3b3f5ced-57ef-4c72-8042-b1855ce2b528",
      "content": "    def _run_migrations(self, should_initialize_alembic, fix) -> None:\n        # First we need to check if alembic has been initialized\n        # If not, we need to initialize it\n        # if not self.script_location.exists(): # this is not the correct way to check if alembic has been initialized\n        # We need to check if the alembic_version table exists\n        # if not, we need to initialize alembic\n        # stdout should be something like sys.stdout\n        # which is a buffer\n        # I don't want to output anything\n        # subprocess.DEVNULL is an int\n        with self.alembic_log_path.open(\"w\", encoding=\"utf-8\") as buffer:\n            alembic_cfg = Config(stdout=buffer)\n            # alembic_cfg.attributes[\"connection\"] = session\n            alembic_cfg.set_main_option(\"script_location\", str(self.script_location))\n            alembic_cfg.set_main_option(\"sqlalchemy.url\", self.database_url.replace(\"%\", \"%%\"))\n\n            if should_initialize_alembic:\n                try:\n                    self.init_alembic(alembic_cfg)\n                except Exception as exc:\n                    msg = \"Error initializing alembic\"\n                    logger.exception(msg)\n                    raise RuntimeError(msg) from exc\n            else:\n                logger.info(\"Alembic already initialized\")\n\n            logger.info(f\"Running DB migrations in {self.script_location}\")\n\n            try:\n                buffer.write(f\"{datetime.now(tz=timezone.utc).astimezone().isoformat()}: Checking migrations\\n\")\n                command.check(alembic_cfg)\n            except Exception as exc:  # noqa: BLE001\n                logger.debug(f\"Error checking migrations: {exc}\")\n                if isinstance(exc, util.exc.CommandError | util.exc.AutogenerateDiffsDetected):\n                    command.upgrade(alembic_cfg, \"head\")\n                    time.sleep(3)\n\n            try:\n                buffer.write(f\"{datetime.now(tz=timezone.utc).astimezone()}: Checking migrations\\n\")\n                command.check(alembic_cfg)\n            except util.exc.AutogenerateDiffsDetected as exc:\n                logger.exception(\"Error checking migrations\")\n                if not fix:\n                    msg = f\"There's a mismatch between the models and the database.\\n{exc}\"\n                    raise RuntimeError(msg) from exc\n\n            if fix:\n                self.try_downgrade_upgrade_until_success(alembic_cfg)",
      "construct_id": "d24880d7-fb1b-4bfe-81d6-007ec27221a3",
      "tags": [],
      "scores": {},
      "metadata": {
        "created_at": "2025-02-27T18:52:27.922000",
        "updated_at": "2025-02-27T18:52:27.922000",
        "language": "py",
        "file": "src/backend/base/langflow/services/database/service.py",
        "name": "original",
        "imports": [],
        "file_operation": "edit",
        "enabled": true,
        "line_numbers": {
          "start": 280,
          "end": 327
        },
        "tokens": null,
        "construct_tags": [
          "RANK 1-10",
          "FUNCTION",
          "PROFILER",
          "SPEEDSCOPE",
          "RANK 7"
        ]
      }
    }
  ]
}